{"version":3,"sources":["services/api.js","context/Context.js","context/FilterContext.js","components/Table.jsx","components/Filters.jsx","App.js","index.js"],"names":["fetchPlanets","fetch","then","response","json","data","results","Context","createContext","FilterContext","Table","planets","useContext","className","map","item","i","key","name","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url","INITIAL_STATE","column","comparison","value","Search","useState","state","setState","filters","setFilters","handleChange","target","onChange","filterByName","placeholder","data-testid","htmlFor","type","onClick","filterByNumericValues","fil","index","newNumeric","splice","newFilters","console","log","removeFilter","INITIAL_FILTER","App","setPlanets","setData","useEffect","dataF","filter","includes","forEach","elem","planet","includesName","toLowerCase","Provider","Filters","ReactDOM","render","document","getElementById"],"mappings":"+SAMeA,EAJM,kBAAMC,MAFf,kDAGTC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUA,EAAKC,YCARC,EAFCC,0BCEDC,EAFOD,0B,YC8CPE,MA5Cf,WAAkB,IACRC,EAAYC,qBAAWL,GAAvBI,QACR,OACE,2BAAOE,UAAU,SACf,+BACE,4BACE,oCACA,+CACA,8CACA,wCACA,uCACA,uCACA,uCACA,6CACA,0CACA,qCACA,uCACA,sCACA,qCAGJ,+BACGF,EAAQG,KAAI,SAACC,EAAMC,GAAP,OACX,wBAAIC,IAAMD,GACR,4BAAKD,EAAKG,MACV,4BAAKH,EAAKI,iBACV,4BAAKJ,EAAKK,gBACV,4BAAKL,EAAKM,UACV,4BAAKN,EAAKO,SACV,4BAAKP,EAAKQ,SACV,4BAAKR,EAAKS,SACV,4BAAKT,EAAKU,eACV,4BAAKV,EAAKW,YACV,4BAAKX,EAAKY,OACV,4BAAKZ,EAAKa,SACV,4BAAKb,EAAKc,QACV,4BAAKd,EAAKe,Y,qBCrChBC,EAAgB,CACpBC,OAAQ,aACRC,WAAY,YACZC,MAAO,KAwGMC,MArGf,WAAmB,IAAD,EACUC,mBAASL,GADnB,mBACTM,EADS,KACFC,EADE,OAEgB1B,qBAAWH,GAAnC8B,EAFQ,EAERA,QAASC,EAFD,EAECA,WAQXC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUxB,EAAoB,EAApBA,KAAMgB,EAAc,EAAdA,MACtCI,EAAS,2BACJD,GADG,kBAELnB,EAAOgB,MAsBZ,OAEE,6BACE,2BACES,SAnCgB,SAAC,GAAgB,IAAdD,EAAa,EAAbA,OACvBF,EAAW,2BACND,GADK,IACIK,aAAc,CAAE1B,KAAMwB,EAAOR,WAkCvCW,YAAY,cACZC,cAAY,gBAEd,2BAAOC,QAAQ,UAAf,qBAEE,4BACEJ,SAAWF,EACXP,MAAQG,EAAML,OACdd,KAAK,SACL4B,cAAY,iBAEZ,4BAAQZ,MAAM,cAAd,cACA,4BAAQA,MAAM,kBAAd,kBACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,mBAAd,mBACA,4BAAQA,MAAM,iBAAd,mBAGJ,2BAAOa,QAAQ,cAAf,6BAEE,4BACEJ,SAAWF,EACXP,MAAQG,EAAMJ,WACdf,KAAK,aACL4B,cAAY,qBAEZ,4BAAQZ,MAAM,aAAd,aACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,WAAd,aAGJ,2BAAOa,QAAQ,SAAf,kBAEE,2BACEJ,SAAWF,EACXP,MAAQG,EAAMH,MACdc,KAAK,SACL9B,KAAK,QACL4B,cAAY,kBAGhB,4BACEE,KAAK,SACLC,QAlEe,WACnBT,EAAW,2BACND,GADK,IAERW,sBAAsB,GAAD,mBAChBX,EAAQW,uBADQ,CAEnBb,QA8DAS,cAAY,iBAHd,UAOA,iCACE,4BACGP,EAAQW,sBAAsBpC,KAAI,SAACqC,EAAKC,GAAN,OACjC,wBAAIN,cAAY,SAAS7B,IAAMmC,GAA/B,UACMD,EAAInB,OADV,YACoBmB,EAAIlB,WADxB,aACuCkB,EAAIjB,OACzC,4BAAQc,KAAK,SAASC,QAAU,kBAlEvB,SAACjC,GACpB,IAAMqC,EAAad,EAAQW,sBAC3BG,EAAWC,OAAOtC,EAAG,GACrB,IAAMuC,EAAU,2BAAQhB,GAAR,IAAiBW,sBAAsB,YAAKG,KAC5DG,QAAQC,IAAIF,GACZf,EAAW,eAAKe,IA6DgCG,CAAaN,KAAnD,aC9FRO,EAAiB,CACrBf,aAAc,CACZ1B,KAAM,IAERgC,sBAAuB,IA2DVU,MAxDf,WAAgB,IAAD,EACiBxB,mBAAS,IAD1B,mBACNzB,EADM,KACGkD,EADH,OAEiBzB,mBAASuB,GAF1B,mBAENpB,EAFM,KAEGC,EAFH,OAGWJ,mBAAS,IAHpB,mBAGN/B,EAHM,KAGAyD,EAHA,KA8Cb,OAzCAC,qBAAU,WACR/D,IACGE,MAAK,SAACC,GAAD,OAAc2D,EAAQ3D,QAC7B,IAEH4D,qBAAU,WACR,IAAIC,EAAQ3D,EACYa,EAAWqB,EAA3BK,aAAgB1B,KACpBb,IAAS,IAAe,KAATa,IACjB8C,EAAQA,EAAMC,QAAO,SAACjD,GAAD,OAAOA,EAAEE,KAAKgD,SAAShD,OAE9C2C,EAAWG,KACV,CAAC3D,EAAMkC,IAEVwB,qBAAU,WAAO,IAEG7C,EAEdqB,EAFFK,aAAgB1B,KAEdqB,EADFW,sBAGoBiB,SAAQ,SAACC,GAAU,IAC/BnC,EAAemC,EAAfnC,WACAD,EAAWoC,EAAXpC,OACAE,EAAUkC,EAAVlC,MACF+B,EAAS5D,EAAK4D,QAAO,SAACI,GAC1B,IAAMC,EAAgBD,EAAOnD,KAAMqD,cAAcL,SAAShD,EAAKqD,eAC/D,OAAQtC,GACR,IAAM,YACJ,OAASoC,EAAOrC,IAAaE,GAAUoC,EACzC,IAAM,YACJ,OAASD,EAAOrC,IAAaE,GAAUoC,EACzC,IAAM,UACJ,OAASD,EAAOrC,MAAeE,GAAUoC,EAC3C,QACE,OAAOA,MAGXT,EAAWI,QAEZ,CAAC5D,EAAMkC,IAGR,kBAAC,EAAciC,SAAf,CAAwBtC,MAAQ,CAAEK,UAASC,eACzC,kBAAC,EAAQgC,SAAT,CAAkBtC,MAAQ,CAAE7B,OAAMM,UAASkD,eACzC,kBAACY,EAAD,MACA,kBAAC,EAAD,SC7DRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.aa5182ff.chunk.js","sourcesContent":["const URL = 'https://swapi-trybe.herokuapp.com/api/planets/';\n\nconst fetchPlanets = () => fetch(URL)\n  .then((response) => response.json())\n  .then((data) => data.results);\n\nexport default fetchPlanets;\n","import { createContext } from 'react';\n\nconst Context = createContext();\n\nexport default Context;\n","import { createContext } from 'react';\n\nconst FilterContext = createContext();\n\nexport default FilterContext;\n","import React, { useContext } from 'react';\nimport Context from '../context/Context';\nimport './Table.css';\n\nfunction Table() {\n  const { planets } = useContext(Context);\n  return (\n    <table className=\"Table\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Rotation Period</th>\n          <th>Orbital Period</th>\n          <th>Diameter</th>\n          <th>Climate</th>\n          <th>Gravity</th>\n          <th>Terrain</th>\n          <th>Surface Water</th>\n          <th>Population</th>\n          <th>Films</th>\n          <th>Created</th>\n          <th>Edited</th>\n          <th>Url</th>\n        </tr>\n      </thead>\n      <tbody>\n        {planets.map((item, i) => (\n          <tr key={ i }>\n            <td>{item.name}</td>\n            <td>{item.rotation_period}</td>\n            <td>{item.orbital_period}</td>\n            <td>{item.diameter}</td>\n            <td>{item.climate}</td>\n            <td>{item.gravity}</td>\n            <td>{item.terrain}</td>\n            <td>{item.surface_water}</td>\n            <td>{item.population}</td>\n            <td>{item.films}</td>\n            <td>{item.created}</td>\n            <td>{item.edited}</td>\n            <td>{item.url}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Table;\n","import React, { useContext, useState } from 'react';\nimport FilterContext from '../context/FilterContext';\n\nconst INITIAL_STATE = {\n  column: 'population',\n  comparison: 'maior que',\n  value: '0',\n};\n\nfunction Search() {\n  const [state, setState] = useState(INITIAL_STATE);\n  const { filters, setFilters } = useContext(FilterContext);\n\n  const setFilterName = ({ target }) => {\n    setFilters({\n      ...filters, filterByName: { name: target.value },\n    });\n  };\n\n  const handleChange = ({ target: { name, value } }) => {\n    setState({\n      ...state,\n      [name]: value,\n    });\n  };\n\n  const submitSearch = () => {\n    setFilters({\n      ...filters,\n      filterByNumericValues: [\n        ...filters.filterByNumericValues,\n        state,\n      ],\n    });\n  };\n\n  const removeFilter = (i) => {\n    const newNumeric = filters.filterByNumericValues;\n    newNumeric.splice(i, 1);\n    const newFilters = { ...filters, filterByNumericValues: [...newNumeric] };\n    console.log(newFilters);\n    setFilters({ ...newFilters });\n  };\n\n  return (\n\n    <div>\n      <input\n        onChange={ setFilterName }\n        placeholder=\"Buscar Nome\"\n        data-testid=\"name-filter\"\n      />\n      <label htmlFor=\"column\">\n        Selecione a coluna\n        <select\n          onChange={ handleChange }\n          value={ state.column }\n          name=\"column\"\n          data-testid=\"column-filter\"\n        >\n          <option value=\"population\">population</option>\n          <option value=\"orbital_period\">orbital_period</option>\n          <option value=\"diameter\">diameter</option>\n          <option value=\"rotation_period\">rotation_period</option>\n          <option value=\"surface_water\">surface_water</option>\n        </select>\n      </label>\n      <label htmlFor=\"comparison\">\n        Selecione a Condição\n        <select\n          onChange={ handleChange }\n          value={ state.comparison }\n          name=\"comparison\"\n          data-testid=\"comparison-filter\"\n        >\n          <option value=\"maior que\">maior que</option>\n          <option value=\"menor que\">menor que</option>\n          <option value=\"igual a\">igual a</option>\n        </select>\n      </label>\n      <label htmlFor=\"value\">\n        Digite o valor:\n        <input\n          onChange={ handleChange }\n          value={ state.value }\n          type=\"number\"\n          name=\"value\"\n          data-testid=\"value-filter\"\n        />\n      </label>\n      <button\n        type=\"button\"\n        onClick={ submitSearch }\n        data-testid=\"button-filter\"\n      >\n        Buscar\n      </button>\n      <section>\n        <ul>\n          {filters.filterByNumericValues.map((fil, index) => (\n            <li data-testid=\"filter\" key={ index }>\n              {`${fil.column} ${fil.comparison}: ${fil.value}`}\n              <button type=\"button\" onClick={ () => removeFilter(index) }>X</button>\n            </li>))}\n        </ul>\n      </section>\n    </div>\n  );\n}\n\nexport default Search;\n","import React, { useEffect, useState } from 'react';\nimport fetchPlanets from './services/api';\nimport Context from './context/Context';\nimport FilterContext from './context/FilterContext';\nimport './App.css';\nimport Table from './components/Table';\nimport Filters from './components/Filters';\n\nconst INITIAL_FILTER = {\n  filterByName: {\n    name: '',\n  },\n  filterByNumericValues: [],\n};\n\nfunction App() {\n  const [planets, setPlanets] = useState([]);\n  const [filters, setFilters] = useState(INITIAL_FILTER);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetchPlanets()\n      .then((response) => setData(response));\n  }, []);\n\n  useEffect(() => {\n    let dataF = data;\n    const { filterByName: { name } } = filters;\n    if (data !== [] && name !== '') {\n      dataF = dataF.filter((i) => i.name.includes(name));\n    }\n    setPlanets(dataF);\n  }, [data, filters]);\n\n  useEffect(() => {\n    const {\n      filterByName: { name },\n      filterByNumericValues,\n    } = filters;\n\n    filterByNumericValues.forEach((elem) => {\n      const { comparison } = elem;\n      const { column } = elem;\n      const { value } = elem;\n      const filter = data.filter((planet) => {\n        const includesName = (planet.name).toLowerCase().includes(name.toLowerCase());\n        switch (comparison) {\n        case ('maior que'):\n          return +(planet[column]) > +(value) && includesName;\n        case ('menor que'):\n          return +(planet[column]) < +(value) && includesName;\n        case ('igual a'):\n          return +(planet[column]) === +(value) && includesName;\n        default:\n          return includesName;\n        }\n      });\n      setPlanets(filter);\n    });\n  }, [data, filters]);\n\n  return (\n    <FilterContext.Provider value={ { filters, setFilters } }>\n      <Context.Provider value={ { data, planets, setPlanets } }>\n        <Filters />\n        <Table />\n      </Context.Provider>\n    </FilterContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}